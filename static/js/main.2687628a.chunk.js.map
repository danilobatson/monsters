{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search/search.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAaeA,MAVf,SAAcC,GACZ,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACzB,6BAAKL,EAAMI,QAAQE,OAChB,6BAAKN,EAAMI,QAAQG,YCOVC,MAXf,SAAkBR,GAEhB,OACA,qBAAKC,UAAW,YAAhB,SACED,EAAMS,SAASC,KAAI,SAACN,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCMRM,MAZf,YAA8C,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC5B,OACA,qBAAKZ,UAAU,SAAf,SACC,uBACCa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC8BCG,E,kDAhCd,WAAYhB,GAAQ,IAAD,8BAClB,cAAMA,IAEDiB,MAAQ,CACZR,SAAU,GACVS,YAAa,IALI,E,qDASnB,WAAqB,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAE7C,WAAU,IAAD,SAC4BE,KAAKR,MAA/BR,EADF,EACEA,SAAUS,EADZ,EACYA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GACvC,OAAOA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAE3D,OACC,sBAAK3B,UAAU,MAAf,UACC,kDACI,cAAC,EAAD,CACAW,YAAY,kBACZG,SAAU,SAACe,GAAD,OAAO,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA3BNO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2687628a.chunk.js","sourcesContent":["import React from 'react'\nimport './card.css'\n\nfunction Card(props) {\n  return (\n\t\t<div className='card-container'>\n      <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n\t\t\t<h2>{props.monster.name}</h2>\n      <h3>{props.monster.email}</h3>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from 'react'\nimport './card-list.css'\nimport Card  from '../card/card';\n\nfunction CardList(props) {\n\n  return (\n\t\t<div className={'card-list'}>\n\t\t\t{props.monsters.map((monster) => (\n\t\t\t\t<Card key={monster.id} monster={monster}/>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default CardList\n","import React from 'react'\nimport './search.css'\n\nfunction Search({placeholder, handleChange}) {\n  return (\n\t\t<div className='search'>\n\t\t\t<input\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tonChange={handleChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Search\n","import './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list';\nimport Search from './components/search/search';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ monsters: users }));\n\t}\n\trender() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters Rolodex</h1>\n        <Search\n        placeholder='Search Monsters'\n        onChange={(e) => this.setState({ searchField: e.target.value })}\n        />\n\t\t\t\t<CardList monsters={filteredMonsters}></CardList>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}